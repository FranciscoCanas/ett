  #   http://example.com:8080/jira/rest/api/2/issue [POST]
  #   http://example.com:8080/jira/rest/api/2/issue/bulk [POST]
  #   http://example.com:8080/jira/rest/api/2/issue/createmeta [GET]
  #   http://example.com:8080/jira/rest/api/2/issue/{issueIdOrKey} [GET, DELETE, PUT]
  #   http://example.com:8080/jira/rest/api/2/issue/{issueIdOrKey}/assignee [PUT]
  #   http://example.com:8080/jira/rest/api/2/issue/{issueIdOrKey}/comment [GET, POST]
  #   http://example.com:8080/jira/rest/api/2/issue/{issueIdOrKey}/comment/{id} [GET, PUT, DELETE]
  #   http://example.com:8080/jira/rest/api/2/issue/{issueIdOrKey}/editmeta [GET]
  #   http://example.com:8080/jira/rest/api/2/issue/{issueIdOrKey}/notify [POST]
  #   http://example.com:8080/jira/rest/api/2/issue/{issueIdOrKey}/remotelink [GET, POST, DELETE]
  #   http://example.com:8080/jira/rest/api/2/issue/{issueIdOrKey}/remotelink/{linkId} [GET, PUT, DELETE]
  #   http://example.com:8080/jira/rest/api/2/issue/{issueIdOrKey}/transitions [GET, POST]
  #   http://example.com:8080/jira/rest/api/2/issue/{issueIdOrKey}/votes [DELETE, POST, GET]
  #   http://example.com:8080/jira/rest/api/2/issue/{issueIdOrKey}/watchers [GET, POST, DELETE]
  #   http://example.com:8080/jira/rest/api/2/issue/{issueIdOrKey}/worklog [GET, POST]
  #   http://example.com:8080/jira/rest/api/2/issue/{issueIdOrKey}/worklog/{id} [GET, PUT, DELETE] 

  require jira_bug
  require bz_bugs_controller
  # This class is responsible for sending all above REST requests to JIRA instance, and handling
  # the responses.
  class JiraBugsController < ApplicationController
    require 'net/http'
    require 'json'


    # Not needed if using basic authentication.
    def authenticate(username, password)

    end

    # Returns the URI for the given resource.
    def make_jira_uri(resource)
      JiraBug.JIRA_BASE_URI + JIRA_RESOURCES[resource]
    end

    # Create a new JIRA issue.
    def create(jira_info)
      begin_check_param
      check_param_user(params)
      check_param_pwd(params)
      check_param_ver(params)
      end_check_param
      # Make parameters Hash
      parameters = {
        'userid' => params[:user],
        'pwd' => params[:pwd]
        # jira params here
      }

      # Put together URI:
      uri = make_jira_uri("issue")
      # Create HTTP request and get response
      @response = Net::HTTP.post_form(uri, parameters)


    end

    # Update fields on an existing JIRA issue.
    def update_fields(jira_info, jira_issue_id)
    end

    # GET an issue from JIRA.
    def get_issue()

    end

  end
